#! /usr/bin/env ruby1.9.1

require 'optparse'
require 'open3'

class TestSuccess
	def pass?
		return true
	end

	def failure?
		return false
	end

	def error?
		return false
	end

	def symbol
		return '.'
	end
end

class TestFailure
	def pass?
		return false
	end

	def failure?
		return true
	end

	def error?
		return false
	end

	def symbol
		return 'F'
	end

	def initialize(name, stdout, stderr)
		@name = name
		@stdout = stdout
		@stderr = stderr
	end

	def output
		output = "FAILURE: #{@name}\n"
		if not @stdout.empty?
			output += "stdout:\n"
			output += @stdout
		end
		if not @stderr.empty?
			output += "stderr:\n"
			output += @stderr
		end
		return output
	end
end

class TestError
	attr_reader :name
	attr_reader :stdout
	attr_reader :stderr
	attr_reader :termsig

	def pass?
		return false
	end

	def failure?
		return false
	end

	def error?
		return true
	end

	def symbol
		return 'E'
	end

	def initialize(name, stdout, stderr, termsig)
		@name = name
		@stdout = stdout
		@stderr = stderr
		@termsig = termsig
	end

	def output
		output = "ERROR: #{@name}\n"
		if @termsig == 11
			output += "Segmentation fault\n"
		else
			output += "Term Signal: #{@termsig}\n"
		end
		if not @stdout.empty?
			output += "stdout:\n"
			output += @stdout
		end
		if not @stderr.empty?
			output += "stderr:\n"
			output += @stderr
		end
		return output
	end
end

def parse_args()
	options = {}
	OptionParser.new do |opts|
		opts.banner = 'Usage: accert testfile [file]'
	end.parse!

	return options, ARGV
end

def fetch_tests(file)
	return `#{file}`.split("\n")
end

def filter_tests(tests, filter)
	if filter.nil?
		return tests
	end
	selection = []
	tests.each do |t|
		if /#{filter}/ =~ t
			selection << t
		end
	end
	return selection
end

def run_test(file, test)
	stdout, stderr, status = Open3.capture3(file, test)
	result = status.exitstatus
	if result == 0
		return TestSuccess.new
	elsif result == 1
		return TestFailure.new(test, stdout, stderr)
	end
	return TestError.new(test, stdout, stderr, status.termsig)
end

def run_tests(file, tests)
	success = true
	results = []
	tests.each do |t|
		result = run_test(file, t)
		success = result.pass? and success
		print result.symbol
		results << result
	end
	print "\n"
	return success, results
end

def print_failures(results)
	passes = 0
	results.each do |r|
		if r.pass?
			passes += 1
		else
			print "\n"
			print r.output
		end
	end

	print "\nPassed #{passes} of #{results.count} tests\n"
end

def main()
	opts, args = parse_args()
	if args.length < 1
		print "too few arguments\n"
		return -1
	end
	cmd = args[0]
	filter = nil
	if args.length == 2
		filter = args[1]
	end

	tests = fetch_tests(cmd)
	selection = filter_tests(tests, filter)
	success, results = run_tests(cmd, selection)
	print_failures(results)
	return success
end

exit main()
